// Learn more about F# at http://fsharp.net. See the 'F# Tutorial' project
// for more guidance on F# programming.

#load "Library1.fs"
open ProjectEuler

// Define your library scripting code here

// Euler Project Problem #1 - Multiples of 3 and 5
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.
let numLessThan1000 = [1 .. 999]
numLessThan1000
|> List.filter(fun x -> x % 3 = 0 || x % 5 = 0)
|> List.reduce(fun acc x -> acc + x)


// Euler Project Problem #2 - Even Fibonacci numbers
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
let FibonacciSum (upTo, filter) =
    let rec FibonacciAcc (acc, thisNum, lastNum, upTo) =
        let fibo = thisNum + lastNum
        if (fibo > upTo) then acc
        else if filter(fibo) then FibonacciAcc (fibo + acc, fibo, thisNum, upTo)
        else FibonacciAcc (acc, fibo, thisNum, upTo)
    
    FibonacciAcc (0, 1, 1, upTo)

let answer2 = FibonacciSum (4000000, fun x -> x % 2 = 0)

// Alternate solution to Euler Project Problem #2 that I like a lot better
let MakeFibonacciSequence max =
    let rec FibonacciSeqImpl prev curr =
        if prev + curr < max then
            let current = prev + curr
            let rest = FibonacciSeqImpl curr current
            current :: rest
        else
            []

    0::1::(FibonacciSeqImpl 0 1)

let sumEvens list =
    list
    |> List.filter (fun x -> x % 2 = 0)
    |> List.sum

let answer2a = sumEvens (MakeFibonacciSequence 4000000)


// Euler Project Problem #3 - Largest prime factor
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?
